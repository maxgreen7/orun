// Generated by CoffeeScript 1.10.0
(function() {
  var Action, ClientAction, ReportAction, UrlAction, ViewAction, WindowAction,
    extend = function(child, parent) { for (var key in parent) { if (hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; },
    hasProp = {}.hasOwnProperty;

  Action = (function() {
    Action.prototype.actionType = null;

    function Action(info1, scope1, location1) {
      this.info = info1;
      this.scope = scope1;
      this.location = location1;
      this.currentUrl = {
        path: this.location.$$path,
        params: this.location.$$search
      };
      this.history = [];
      if (this.info._currentAction) {
        this.history.push(this.info._currentAction);
      }
    }

    Action.prototype.openObject = function(service, id, evt, title) {
      var url;
      evt.preventDefault();
      evt.stopPropagation();
      if (evt.ctrlKey) {
        window.open(evt.target.href);
        return false;
      }
      url = "action/" + service + "/view/";
      this.location.path(url, this).search({
        view_type: 'form',
        id: id,
        title: title
      });
      return false;
    };

    Action.prototype.apply = function() {};

    Action.prototype.backTo = function(index) {
      var h, location, params, path;
      if (index === -1) {
        h = this.history[0];
        if (h.backUrl) {
          location = h.backUrl;
        } else {
          location = h.currentUrl;
        }
      } else {
        h = this.history[index];
        location = h.currentUrl;
      }
      path = location.path;
      params = location.search;
      return this.location.path(path, false, h).search(params);
    };

    Action.prototype.execute = function() {};

    Action.prototype.getCurrentTitle = function() {
      return this.info.display_name;
    };

    Action.prototype.search = function() {
      if (!this.isDialog) {
        console.log(arguments);
        return this.location.search.apply(null, arguments);
      }
    };

    return Action;

  })();

  WindowAction = (function(superClass) {
    extend(WindowAction, superClass);

    WindowAction.actionType = 'sys.action.window';

    function WindowAction(info, scope, location) {
      WindowAction.__super__.constructor.call(this, info, scope, location);
      this.notifyFields = [];
      this.viewMode = info.view_mode;
      this.viewModes = this.viewMode.split(',');
      this.viewType = null;
    }

    WindowAction.prototype.registerFieldNotify = function(field) {
      if (this.notifyFields.indexOf(field.name) === -1) {
        this.scope.$watch('record.' + field.name, function() {
          return console.log('field changed', field);
        });
        return this.notifyFields.push(fields);
      }
    };

    WindowAction.prototype.getCurrentTitle = function() {
      if (this.viewType === 'form') {
        return this.scope.record.display_name;
      }
      return WindowAction.__super__.getCurrentTitle.call(this);
    };

    WindowAction.prototype.createNew = function() {
      this.setViewType('form');
      return this.scope.dataSource.newRecord();
    };

    WindowAction.prototype.deleteSelection = function() {
      var i;
      if (confirm(Katrid.i18n.gettext('Confirm delete record?'))) {
        this.scope.model.destroy(this.scope.record.id);
        i = this.scope.records.indexOf(this.scope.record);
        if (i) {
          this.scope.dataSource.search({});
        }
        return this.setViewType('list');
      }
    };

    WindowAction.prototype.copy = function() {
      this.setViewType('form');
      this.scope.dataSource.copy(this.scope.record.id);
      return false;
    };

    WindowAction.prototype.routeUpdate = function(search) {
      var fields, filter, ref, ref1, ref2, viewType;
      viewType = search.view_type;
      if (this.viewType && this.viewType !== 'form' && viewType === 'form') {
        this.backUrl = this.currentUrl;
      }
      if (search.view_type != null) {
        if (this.scope.records == null) {
          this.scope.records = [];
        }
        if (this.viewType !== search.view_type) {
          this.scope.dataSource.pageIndex = null;
          this.scope.record = null;
          this.viewType = search.view_type;
          this.execute();
          return;
        }
        if (((ref = search.view_type) === 'list' || ref === 'card') && !search.page) {
          this.location.search('page', 1);
          this.location.search('limit', this.info.limit);
        } else {
          filter = {};
          if (search.q != null) {
            filter.q = search.q;
          }
          fields = _.keys(this.scope.view.fields);
          console.log(filter);
          if (((ref1 = search.view_type) === 'list' || ref1 === 'card') && search.page !== this.scope.dataSource.pageIndex) {
            this.scope.dataSource.pageIndex = parseInt(search.page);
            this.scope.dataSource.limit = parseInt(search.limit);
            this.scope.dataSource.search(filter, search.page, fields);
          } else if (((ref2 = search.view_type) === 'list' || ref2 === 'card') && (search.q != null)) {
            this.scope.dataSource.search(filter, search.page, fields);
          }
          if (search.id && (((this.scope.record != null) && this.scope.record.id !== search.id) || (this.scope.record == null))) {
            this.scope.record = null;
            this.scope.dataSource.get(search.id);
          }
        }
      } else {
        this.setViewType(this.viewModes[0]);
      }
      this.currentUrl = {
        url: this.location.$$url,
        path: this.location.$$path,
        search: this.location.$$search
      };
      if (search.title) {
        this.info.display_name = search.title;
      }
    };

    WindowAction.prototype.setViewType = function(viewType) {
      var search;
      if (this.viewType === 'form' && !viewType && this.backUrl) {
        return this.location.path(this.backUrl.path, false, this).search(this.backUrl.search);
      } else {
        search = this.location.$$search;
        if (viewType !== 'form') {
          delete search.id;
        }
        search.view_type = viewType;
        return this.location.search(search);
      }
    };

    WindowAction.prototype.apply = function() {
      this.render(this.scope, this.scope.view.content, this.viewType);
      return this.routeUpdate(this.location.$$search);
    };

    WindowAction.prototype.execute = function() {
      var r;
      if (this.views != null) {
        this.scope.view = this.views[this.viewType];
        this.apply();
      } else {
        r = this.scope.model.loadViews({
          views: this.info.views,
          action: this.info.id
        });
        r.done((function(_this) {
          return function(res) {
            var views;
            views = res.result;
            _this.views = views;
            return _this.scope.$apply(function() {
              _this.scope.views = views;
              _this.scope.view = views[_this.viewType];
              return _this.apply();
            });
          };
        })(this));
      }
      if (this.viewType !== 'list') {
        return this.scope.dataSource.groupBy();
      }
    };

    WindowAction.prototype.render = function(scope, html, viewType) {
      if (!this.isDialog) {
        html = Katrid.UI.Utils.Templates['preRender_' + viewType](scope, html);
      }
      return scope.setContent(html);
    };

    WindowAction.prototype.searchText = function(q) {
      return this.location.search('q', q);
    };

    WindowAction.prototype._prepareParams = function(params) {
      var j, len, p, r;
      r = {};
      for (j = 0, len = params.length; j < len; j++) {
        p = params[j];
        if (p.field && p.field.type === 'ForeignKey') {
          r[p.field.name] = p.id;
        } else {
          r[p.id.name + '__icontains'] = p.text;
        }
      }
      return r;
    };

    WindowAction.prototype.setSearchParams = function(params) {
      var arg, k, p, v;
      p = {};
      if (this.info.domain) {
        p = $.parseJSON(this.info.domain);
      }
      for (k in p) {
        v = p[k];
        arg = {};
        arg[k] = v;
        params.push(arg);
      }
      console.log(params);
      return this.scope.dataSource.search(params);
    };

    WindowAction.prototype.applyGroups = function(groups) {
      return this.scope.dataSource.groupBy(groups[0]);
    };

    WindowAction.prototype.doViewAction = function(viewAction, target, confirmation, prompt) {
      return this._doViewAction(this.scope, viewAction, target, confirmation, prompt);
    };

    WindowAction.prototype._doViewAction = function(scope, viewAction, target, confirmation, prompt) {
      var promptValue;
      promptValue = null;
      if (prompt) {
        promptValue = window.prompt(prompt);
      }
      if (!confirmation || (confirmation && confirm(confirmation))) {
        return scope.model.doViewAction({
          action_name: viewAction,
          target: target,
          prompt: promptValue
        }).done(function(res) {
          var j, l, len, len1, msg, ref, ref1, results, results1;
          if (res.status === 'open') {
            return window.open(res.open);
          } else if (res.status === 'fail') {
            ref = res.messages;
            results = [];
            for (j = 0, len = ref.length; j < len; j++) {
              msg = ref[j];
              results.push(Katrid.Dialogs.Alerts.error(msg));
            }
            return results;
          } else if (res.status === 'ok' && res.result.messages) {
            ref1 = res.result.messages;
            results1 = [];
            for (l = 0, len1 = ref1.length; l < len1; l++) {
              msg = ref1[l];
              results1.push(Katrid.Dialogs.Alerts.success(msg));
            }
            return results1;
          }
        });
      }
    };

    WindowAction.prototype.listRowClick = function(index, row, evt) {
      var search, url;
      search = {
        view_type: 'form',
        id: row.id
      };
      if (evt.ctrlKey) {
        url = '#' + this.location.$$path + '?' + $.param(search);
        window.open(url);
        return;
      }
      if (row._group) {
        row._group.expanded = !row._group.expanded;
        row._group.collapsed = !row._group.expanded;
        if (row._group.expanded) {
          this.scope.dataSource.expandGroup(index, row);
        } else {
          this.scope.dataSource.collapseGroup(index, row);
        }
      } else {
        this.scope.dataSource.setRecordIndex(index);
        this.location.search(search);
      }
    };

    WindowAction.prototype.autoReport = function() {
      return this.scope.model.autoReport().done(function(res) {
        if (res.ok && res.result.open) {
          return window.open(res.result.open);
        }
      });
    };

    WindowAction.prototype.showDefaultValueDialog = function() {
      var html, modal;
      html = Katrid.UI.Utils.Templates.getSetDefaultValueDialog();
      modal = $(this.scope.compile(html)(this.scope)).modal();
      modal.on('hidden.bs.modal', function() {
        $(this).data('bs.modal', null);
        return $(this).remove();
      });
    };

    return WindowAction;

  })(Action);

  ReportAction = (function(superClass) {
    extend(ReportAction, superClass);

    ReportAction.actionType = 'sys.action.report';

    function ReportAction(info, scope, location) {
      ReportAction.__super__.constructor.call(this, info, scope, location);
      this.userReport = {};
    }

    ReportAction.prototype.userReportChanged = function(report) {
      return this.location.search({
        user_report: report
      });
    };

    ReportAction.prototype.routeUpdate = function(search) {
      var svc;
      this.userReport.id = search.user_report;
      if (this.userReport.id) {
        svc = new Katrid.Services.Model('sys.action.report');
        svc.post('load_user_report', null, {
          kwargs: {
            user_report: this.userReport.id
          }
        }).done((function(_this) {
          return function(res) {
            _this.userReport.params = res.result;
            return _this.scope.setContent(_this.info.content);
          };
        })(this));
      } else {
        this.scope.setContent(Katrid.Reports.Reports.renderDialog(this));
      }
    };

    return ReportAction;

  })(Action);

  ViewAction = (function(superClass) {
    extend(ViewAction, superClass);

    function ViewAction() {
      return ViewAction.__super__.constructor.apply(this, arguments);
    }

    ViewAction.actionType = 'sys.action.view';

    ViewAction.prototype.routeUpdate = function(search) {
      return this.scope.setContent(this.info.content);
    };

    return ViewAction;

  })(Action);

  UrlAction = (function(superClass) {
    extend(UrlAction, superClass);

    UrlAction.actionType = 'sys.action.url';

    function UrlAction(info, scope, location) {
      window.location.href = info.url;
    }

    return UrlAction;

  })(Action);

  ClientAction = (function(superClass) {
    extend(ClientAction, superClass);

    ClientAction.actionType = 'sys.action.client';

    function ClientAction(info1, scope1, location1) {
      this.info = info1;
      this.scope = scope1;
      this.location = location1;
      console.log('set scope', this.scope);
    }

    ClientAction.prototype.tag_refresh = function() {
      this.scope.dataSource.refresh();
    };

    ClientAction.prototype.execute = function() {
      if (this.info.tag) {
        this['tag_' + this.info.tag]();
      }
    };

    return ClientAction;

  })(Action);

  this.Katrid.Actions = {
    Action: Action,
    WindowAction: WindowAction,
    ReportAction: ReportAction,
    ViewAction: ViewAction,
    UrlAction: UrlAction,
    ClientAction: ClientAction
  };

  this.Katrid.Actions[WindowAction.actionType] = WindowAction;

  this.Katrid.Actions[ReportAction.actionType] = ReportAction;

  this.Katrid.Actions[ViewAction.actionType] = ViewAction;

  this.Katrid.Actions[UrlAction.actionType] = UrlAction;

  this.Katrid.Actions[ClientAction.actionType] = ClientAction;

}).call(this);

//# sourceMappingURL=actions.js.map
