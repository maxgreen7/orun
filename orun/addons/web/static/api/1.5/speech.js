// Generated by CoffeeScript 1.10.0
(function() {
  var Recognition, VoiceCommand,
    bind = function(fn, me){ return function(){ return fn.apply(me, arguments); }; },
    extend = function(child, parent) { for (var key in parent) { if (hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; },
    hasProp = {}.hasOwnProperty;

  Recognition = (function() {
    function Recognition() {
      this.active = false;
    }

    Recognition.prototype.init = function() {
      var rec;
      rec = window.SpeechRecognition || window.webkitSpeechRecognition || window.mozSpeechRecognition || window.msSpeechRecognition || window.oSpeechRecognition;
      rec = this.recognition = new rec();
      rec.continuous = true;
      rec.onresult = this.onResult;
      rec.onstart = (function(_this) {
        return function() {
          return _this.active = true;
        };
      })(this);
      rec.onend = (function(_this) {
        return function() {
          return _this.active = false;
        };
      })(this);
    };

    Recognition.prototype.pause = function() {
      return this.recognition.pause();
    };

    Recognition.prototype.resume = function() {
      return this.recognition.resume();
    };

    Recognition.prototype.start = function() {
      if (this.recognition == null) {
        this.init();
      }
      return this.recognition.start();
    };

    Recognition.prototype.stop = function() {
      return this.recognition.stop();
    };

    Recognition.prototype.toggle = function() {
      if (this.active) {
        return this.stop();
      } else {
        return this.start();
      }
    };

    Recognition.prototype.onResult = function(event) {
      return console.log(event);
    };

    return Recognition;

  })();

  VoiceCommand = (function(superClass) {
    extend(VoiceCommand, superClass);

    function VoiceCommand() {
      this.onResult = bind(this.onResult, this);
      VoiceCommand.__super__.constructor.apply(this, arguments);
      this.commands = [];
    }

    VoiceCommand.prototype.onResult = function(event) {
      var cmd, i, len, obj, ref, res;
      res = event.results[event.results.length - 1];
      cmd = res[0].transcript;
      if (cmd) {
        cmd = cmd.trim();
        console.log('do cmd', cmd);
        ref = this.commands;
        for (i = 0, len = ref.length; i < len; i++) {
          obj = ref[i];
          if (obj.name.toLocaleLowerCase() === cmd.toLocaleLowerCase()) {
            window.location.href = obj.href;
            break;
          }
        }
      }
    };

    VoiceCommand.prototype.addCommands = function(cmds) {
      return this.commands = this.commands.concat(cmds);
    };

    return VoiceCommand;

  })(Recognition);

  Katrid.Speech = {
    Recognition: Recognition,
    VoiceCommand: VoiceCommand
  };

  Katrid.Speech.voiceCommand = new VoiceCommand();

  if (Katrid.Settings.Speech.enabled) {
    Katrid.Speech.voiceCommand.start();
  }

}).call(this);

//# sourceMappingURL=speech.js.map
