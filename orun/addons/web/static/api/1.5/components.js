// Generated by CoffeeScript 1.10.0
(function() {
  var formCount, uiKatrid;

  uiKatrid = Katrid.uiKatrid;

  formCount = 0;

  uiKatrid.directive('field', function($compile) {
    var fieldType, widget;
    fieldType = null;
    widget = null;
    return {
      restrict: 'E',
      replace: true,
      template: function(element, attrs) {
        if ((element.parent('list').length)) {
          fieldType = 'column';
          return '<column></column>';
        } else {
          fieldType = 'field';
          return '<section class="section-field-' + attrs.name + ' col-lg-6 form-group" />';
        }
      },
      link: function(scope, element, attrs) {
        var field, templ, tp;
        field = scope.view.fields[attrs.name];
        if (fieldType === 'field') {
          widget = attrs.widget;
          if (!widget) {
            tp = field.type;
            if (tp === 'ForeignKey') {
              widget = tp;
            } else if (field.choices) {
              widget = 'SelectField';
            } else if (tp === 'TextField') {
              widget = 'TextareaField';
            } else if (tp === 'BooleanField') {
              widget = 'CheckBox';
            } else {
              widget = 'TextField';
            }
          }
          widget = new Katrid.UI.Widgets[widget];
          field = scope.view.fields[attrs.name];
          templ = $compile(widget.template(scope, element, attrs, field))(scope);
          element.append(templ);
          return widget.link(scope, element, attrs, $compile, field);
        }
      }
    };
  });

  uiKatrid.directive('view', function() {
    return {
      restrict: 'E',
      template: function(element, attrs) {
        formCount++;
        return '';
      },
      link: function(scope, element, attrs) {
        if (scope.model) {
          element.attr('class', 'view-form-' + scope.model.name.replace(new RegExp('\.', 'g'), '-'));
          element.attr('id', 'katrid-form-' + formCount.toString());
          element.attr('model', scope.model);
          return element.attr('name', 'dataForm' + formCount.toString());
        }
      }
    };
  });

  uiKatrid.directive('list', function($compile) {
    return {
      restrict: 'E',
      link: function(scope, element, attrs) {
        var html;
        html = Katrid.UI.Utils.Templates.renderList(scope, element, attrs);
        return element.replaceWith($compile(html)(scope));
      }
    };
  });

  uiKatrid.directive('ngEnter', function() {
    return function(scope, element, attrs) {
      return element.bind("keydown keypress", function(event) {
        if (event.which === 13) {
          scope.$apply(function() {
            return scope.$eval(attrs.ngEnter);
          });
          return event.preventDefault();
        }
      });
    };
  });

}).call(this);

//# sourceMappingURL=components.js.map
