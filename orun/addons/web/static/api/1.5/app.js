// Generated by CoffeeScript 1.10.0
(function() {
  var DialogLocation, actionTempl, ngApp;

  ngApp = angular.module('katridApp', ['ngRoute', 'ngCookies', 'ngSanitize', 'ui-katrid'].concat(Katrid.Bootstrap.additionalModules));

  ngApp.config(function($interpolateProvider) {
    $interpolateProvider.startSymbol('${');
    return $interpolateProvider.endSymbol('}');
  });

  ngApp.run([
    '$route', '$rootScope', '$location', function($route, $rootScope, $location) {
      var original;
      original = $location.path;
      return $location.path = function(path, currentAction, back) {
        var lastRoute, reload, un;
        if (currentAction === false) {
          reload = false;
        } else {
          reload = true;
        }
        if (currentAction != null) {
          lastRoute = $route.current;
          un = $rootScope.$on('$locationChangeSuccess', function() {
            if ($route.current) {
              $route.current.currentAction = currentAction;
              $route.current.reload = reload;
              $route.current.back = back;
            }
            return un();
          });
        }
        return original.apply($location, [path]);
      };
    }
  ]);

  ngApp.factory('actions', function() {
    return {
      get: function(service, id) {
        return $.get("/web/action/" + service + "/" + id + "/");
      }
    };
  });

  actionTempl = "<div id=\"katrid-action-view\"><h1 class=\"ajax-loading-animation margin-left-8\"><i class=\"fa fa-cog fa-spin\"></i> ${ Katrid.i18n.gettext('Loading...') }</h1></div>";

  ngApp.config(function($routeProvider) {
    $routeProvider.when('/action/:actionId/', {
      controller: 'ActionController',
      reloadOnSearch: false,
      resolve: {
        action: [
          '$route', function($route) {
            if ($route.current.back) {
              $route.current.back.info._back = $route.current.back;
              return $route.current.back.info;
            }
            return $.get("/web/action/" + $route.current.params.actionId + "/");
          }
        ]
      },
      template: actionTempl
    }).when('/action/:service/view/', {
      controller: 'ActionController',
      reloadOnSearch: false,
      resolve: {
        action: [
          'actions', '$route', function(actions, $route) {
            var params;
            params = $route.current.params;
            return {
              model: [null, $route.current.params.service],
              action_type: "sys.action.window",
              view_mode: 'form',
              object_id: params.id,
              display_name: params.title,
              _currentAction: $route.current.currentAction
            };
          }
        ]
      },
      template: actionTempl
    });
  });

  ngApp.controller('BasicController', function($scope, $compile, $location) {
    $scope.compile = $compile;
    return $scope.Katrid = Katrid;
  });

  DialogLocation = (function() {
    function DialogLocation() {
      this.$$search = {};
    }

    DialogLocation.prototype.search = function() {};

    return DialogLocation;

  })();

  ngApp.controller('ActionController', function($scope, $compile, $location, $route, action) {
    var doButtonClick, init, root;
    $scope.Katrid = Katrid;
    $scope.data = null;
    $scope.location = $location;
    $scope.record = null;
    $scope.recordIndex = null;
    $scope.recordId = null;
    $scope.records = null;
    $scope.viewType = null;
    $scope.recordCount = 0;
    $scope.dataSource = new Katrid.Data.DataSource($scope);
    $scope.compile = $compile;
    $scope.$set = function(field, value) {
      var control;
      control = $scope.form[field];
      if (control) {
        control.$setViewValue(value);
        control.$render();
      } else {
        $scope.record[field] = value;
      }
    };
    $scope.setContent = function(content) {
      var child, el, header, i, len, newHeader, ref, results;
      $('html, body').animate({
        scrollTop: 0
      }, 'fast');
      content = $scope.content = $(content);
      header = content.find('form header').first();
      el = root.html($compile($scope.content)($scope));
      $scope.formElement = el.find('form').first();
      $scope.form = $scope.formElement.controller('form');
      if (header) {
        newHeader = el.find('header').first();
        newHeader.replaceWith($compile(header)($scope));
        ref = header.children();
        results = [];
        for (i = 0, len = ref.length; i < len; i++) {
          child = ref[i];
          child = $(child);
          if (!child.attr('class')) {
            child.addClass('btn btn-default');
          }
          if (child.prop('tagName') === 'BUTTON' && child.attr('type') === 'object') {
            child.attr('type', 'button');
            child.attr('button-type', 'object');
            results.push(child.click(doButtonClick));
          } else if (child.prop('tagName') === 'BUTTON' && !child.attr('type')) {
            results.push(child.attr('type', 'button'));
          } else {
            results.push(void 0);
          }
        }
        return results;
      }
    };
    doButtonClick = function() {
      var btn, meth;
      btn = $(this);
      meth = btn.prop('name');
      return $scope.model.post(meth, null, {
        kwargs: {
          id: $scope.record.id
        }
      }).done(function(res) {
        var act;
        if (res.ok) {
          if (res.result.type) {
            act = new Katrid.Actions[res.result.type](res.result, $scope, $location);
            return act.execute();
          }
        }
      });
    };
    $scope.getContext = function() {
      return JSON.parse($scope.action.info.context);
    };
    init = function(action) {
      var act, location;
      if ($scope.isDialog) {
        location = new DialogLocation();
      } else {
        location = $location;
      }
      $scope.action = act = new Katrid.Actions[action.action_type](action, $scope, location);
      if (action.model) {
        $scope.model = new Katrid.Services.Model(action.model[1], $scope);
        if (action._back && action._back.views) {
          act.views = action._back.views;
          $scope.views = act.views;
          delete action._back;
        } else {
          act.views = $scope.views;
        }
      }
      if ($scope.isDialog) {
        act.isDialog = $scope.isDialog;
      }
      if ($scope.parentAction) {
        act.parentAction = $scope.parentAction;
      }
      if (act && act.isDialog) {
        act.routeUpdate({
          view_type: action.view_type
        });
        return act.createNew();
      } else {
        return act.routeUpdate($location.$$search);
      }
    };
    if ($scope.parentAction) {
      root = $scope.root;
    } else {
      root = angular.element('#katrid-action-view');
      $scope.$on('$routeUpdate', function() {
        return $scope.action.routeUpdate($location.$$search);
      });
    }
    return init(action);
  });

  this.Katrid.ngApp = ngApp;

}).call(this);

//# sourceMappingURL=app.js.map
